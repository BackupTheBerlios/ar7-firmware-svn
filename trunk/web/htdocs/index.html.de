<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
	<title>AR7-Firmware</title>
	<meta http-equiv="Content-Type" content="text/html">
	<meta name="author" content="Stefan Weil">
	<link rel=stylesheet type="text/css" href="ar7.css" />
</head>

<body>
<table class=page summary="page">
<tr class=titlebar>
<td>
<a href="http://developer.berlios.de">
<img src="http://developer.berlios.de/bslogo.php?group_id=3721" width="124" height="32" border="0" alt="BerliOS"></a>
</td>
<td>
<a href="index.html.de">deutsch</a> <a href="index.html.en">english</a>
</tr>

<tr>
<td class=menu>
<table class=menu summary="menu">
<tr><th><a href="http://developer.berlios.de/projects/ar7-firmware/">AR7-Firmware</a></th></tr>
<tr><td><a href="index.html.de">Übersicht</a></td></tr>
<tr><td><a href="doc/loader.html.de">Bootloader</a></td></tr>
<tr><td><a href="qemu/">Emulation</a></td></tr>
<tr><td><a href="openwrt/index.html.de">OpenWrt</a></td></tr>
<tr><td><a href="devices/">Router</a></td></tr>
<tr><td><a href="tools/">Werkzeuge</a></td></tr>
</table>
</td>

<td class=page>

<h2>Firmware f&uuml;r Sinus 154 DSL Basic SE und Sinus 154 DSL Basic 3</h2>

In diesem Projekt m&ouml;chten wir als erstes eine Open Source Firmware
f&uuml;r den DSL-Router Sinus 154 DSL Basic SE und das fast baugleiche
Sinus 154 DSL Basic 3 entwickeln.
Diese Ger&auml;te werden in Deutschland von der Telekom
vermarktet und sind daher vermutlich sehr verbreitet.<p>

Beide basieren auf einem Prozessor der AR7-Familie von
Texas Instruments und verwenden im Originalzustand eine Closed Source
Firmware, vermutlich 
mit dem Echtzeitbetriebssystem VxWorks von WindRiver Systems.<p>

Da so Erweiterungen und Fehlerkorrekturen f&uuml;r den Anwender nicht
m&ouml;glich sind, suchen wir eine Alternative, die frei erweiterbar ist.<p>

Die Erfahrungen des Projektes k&ouml;nnen sicher auf verwandte Ger&auml;te
der Sinus 154 Familie und auch weitere anderer Hersteller angewendet werden.
Ein Beispiel f&uuml;r kompatible Hardware sind das Sinus 154 DSL SE (darauf
deutet zumindest die Firmware hin, noch nicht praktisch &uuml;berpr&uuml;ft)
und das <a href="devices/sx541.html.de">Siemens Gigaset SX541</a>.
Besitzer solcher Hardware sind willkommen und k&ouml;nnen sich im
Wiki-Bereich des Projektes eintragen oder an die auf der Projektseite
angegebene Kontaktadresse wenden.<p>

Diesen findet man ebenso wie das Entwickler- und Anwender-Forum und weitere
Information &uuml;ber die <a href="http://developer.berlios.de/projects/ar7-firmware/">
Projektseite</a> auf BerliOS.

<h2>Wichtige Hinweise</h2>

Jegliche &Auml;nderungen an Ger&auml;ten, die nach hier gemachten Angaben erfolgen,
sind auf eigene Gefahr. Sie k&ouml;nnen zum Verlust der Garantie f&uuml;hren und
machen im schlimmsten Fall das Ger&auml;t unbrauchbar.<p>

Insbesondere jede Ver&auml;nderung des Bootloaders (im Flash) ist fatal und
daher unbedingt zu vermeiden!

<h2>Projektplanung (Stand 03.11.2005)</h2>

Folgende Schritte sind vorgesehen:
<ul>
<li>Bestimmung der Hardware des Sinus 154 DSL Basic SE.<br>
Dies ist weitgehend abgeschlossen.</li>
<li>Analyse des Bootloaders, mit dem neue Firmware geladen werden kann.<br>
Auch hier gibt es schon weitgehende Erkenntnisse.
Booten von Linux aus dem Flash funktioniert, allerdings wird der Flash dabei
schlecht ausgenutzt
(jeweils 128 KiB verschenkter Speicher bei Kernel und Filesystem).</li>
<li>Debugm&ouml;glichkeit schaffen.<br>
Da ein neuer Firmware-Kernel sicher nicht auf Anhieb so funktionieren
wird, dass eine Netzwerkverbindung zustande kommt, wird eine
Diagnosem&ouml;glichkeit ben&ouml;tigt. Optimal w&auml;re eine
serielle Schnittstelle, notfalls Diagnose
per Statuslampen. Inzwischen klappt die serielle Verbindung,
und auch zwei der Statuslampen lassen sich ansprechen.
Leider gibt es aber noch keinen Kernel Debugger (kgdb).</li>
<li>Auswahl und Erstellung eines Kernels.<br>
Dazu muss ein geeignetes Betriebssystem ausgew&auml;hlt werden (siehe unten).
Erste Versuche wurden bereits mit dem Linux-Kernel von
<a href="openwrt/index.html.de">OpenWrt</a> gemacht und waren schon recht erfolgreich
(Shell &uuml;ber serielle Konsole oder per Telnet bedienbar,
komplettes Betriebssystem bootet nach Einschalten direkt aus dem Flash).</li>
<li>Auswahl und Einbindung weiterer Firmware-Komponenten.<br>
F&uuml;r WLAN-Treiber und weitere Komponenten wie Shell, Serverdienste,
Firewall, Bridgefunktionalit&auml;t usw. kann man gl&uuml;cklicherweise
weitgehend auf andere Open Source Projekte zur&uuml;ckgreifen.
<a href="openwrt/index.html.de">OpenWrt</a> enth&auml;lt schon alles Notwendige.</li>
</ul>

<h2>Hardware</h2>

<h3>Ger&auml;te&uuml;bersicht</h3>

<table summary="devices">
<tr><th>Ger&auml;t</th><th>Prozessor</th><th>Flash</th><th>RAM</th></tr>
<tr><td>Sinus 154 DSL Basic SE</td><td>Texas Instruments TNETD7300 (Sangam)</td><td>2 MiB</td><td>16 MiB</td></tr>
<tr><td>Sinus 154 DSL Basic 3</td><td>Texas Instruments TNETD7300 (Sangam)</td><td>2 MiB</td><td>16 MiB</td></tr>
<tr><td>Sinus 154 DSL SE</td><td>Texas Instruments TNETD7300 (Sangam)???</td><td>??? MiB</td><td>??? MiB</td></tr>
</table>

<p>

Es gibt auch noch etliche andere Ger&auml;te mit sehr &auml;hnlicher Hardware,
beispielsweise von AVM (siehe <a href="http://www.wehavemorefun.de/fritzbox/">
Wiki-Webseite</a>). Deren Firmware ist aber nicht direkt verwendbar.

<h3>Serielle Schnittstelle</h3>

<p>Alle Ger&auml;te haben eine serielle Schnittstelle, die aber nur im Ger&auml;t
zug&auml;nglich ist. Schnittstellenparameter 115000 bps 8N1. F&uuml;r den
Anschluss an PCs wird ein Pegelkonverter von 3,3 V auf RS232 ben&ouml;tigt.
Ich verwende einen MAX232CPE, der bei jedem der grossen Elektronikversender
erh&auml;ltlich ist. Meine Kosten lagen bei rund 12 EUR.
Eine <a href="http://www.wehavemorefun.de/fritzbox/Serielle_Konsole">alternative
L&ouml;sung</a> unter Verwendung eines Handykabels hat bei mir nicht
funktioniert - andere Anwender waren damit aber schon erfolgreich.
Hier sind die notwendigen Verbindungen:</p>

<table summary="serial port">
<tr><th>Sinus 154</th><th>Belegung</th><th>MAX232CPE</th></tr>
<tr><td>10</td><td>3,3 V</td><td>16</td></tr>
<tr><td>9</td><td>GND</td><td>15</td></tr>
<tr><td>5</td><td>out</td><td>11</td></tr>
<tr><td>3</td><td>in</td><td>12</td></tr>
</table>

<pre>
Sinus 154 Steckerleiste (im Ger&auml;t)

  9   5 3 1   |
  x x x x x   |
  x x x x x   |
 10       2   |
--------------+
</pre>

Hinweise zur Beschaltung des MAX232CPE findet man beispielsweise unter
<a href="http://hri.sourceforge.net/tools/">http://hri.sourceforge.net/tools/</a>
oder auf den Webseiten von Maxim.<p>

&Uuml;ber die serielle Schnittstelle kann die Firmware geladen, bedient und
diagnostiziert werden.
Der Bootloader verwendet f&uuml;r bin&auml;re Datentransfers das XModem Protokoll.
MS Windows Hyperterm funktioniert sofort.
F&uuml;r Minicom (LINUX) wird ein spezielles
<a href="tools/sx-at91.c">XModem-Programm</a> ben&ouml;tigt.


<h3>Ethernet</h3>

Jedes Ger&auml;t hat eine Ethernetschnittstelle.

<h3>DSL</h3>

Jedes Ger&auml;t hat einen DSL-Anschluss. Die Hardware unterst&uuml;tzt
ADSL2+ mit bis zu 25 Mbit/s - deutlich mehr, als die Firmware von TCOM
anbietet.

<h3>USB</h3>

Der AR7-Prozessor unterst&uuml;tzt auch einen USB-Anschluss, der aber
bei Sinus 154 DSL Basic SE / Basic 3 nicht herausgef&uuml;hrt ist.
Falls jemand mutig genug ist, kann er versuchen, diesen
Anschluss zu finden und selbst zu verdrahten - 
mit dem Risiko, dabei sein Ger&auml;t zu zerst&ouml;ren.<p>

Das nocht nicht n&auml;her untersuchte Sinus 154 DSL SE hat &uuml;brigens
einen USB-Anschluss herausgef&uuml;hrt!

<h3>WLAN</h3>

<p>Jedes Ger&auml;t hat eine Mini-PCI-Karte mit TNETW1130 von Texas Instruments
f&uuml;r WLAN eingebaut.
Diesen Baustein findet man auch unter der Bezeichnung ACX111.
Die Ansteuerung erfolgt &uuml;ber einen seriellen Bus (VLYNQ).</p>

<p>Neben den Standards IEEE 802.11b und IEEE 802.11g beherrscht der TNETW1130
eine Betriebsart mit der Herstellerbezeichnung 802.11g++, mit der ein
um 35 % h&ouml;herer Nettodurchsatz erreicht wird.
Die Firmware von TCOM kennt diese Betriebsart allerdings nicht.</p>

<p>Es gibt Treiber f&uuml;r die Betriebssysteme VxWorks und Linux
vom Hersteller 
- leider ist der Programmcode aber nicht allgemein zug&auml;nglich.
N&auml;heres findet man bei http://www.linux-mips.org/wiki/AR7.</p>

<p>Im Open-Source-Bereich findet man das Projekt http://acx100.sourceforge.net/,
das mit seinem Linux-Treiber f&uuml;r ACX100 auch den ACX111
zumindest teilweise unterst&uuml;tzt. Das Projekt kennt zur Zeit
allerdings nur die Bussysteme PCI und USB, nicht aber VLYNQ.</p>

<table summary="wlan">
<tr><th>Feature</th><th>TCOM</th><th>TI</th><th>ACX100</th></tr>
<tr><td>Source Code</td><td>no</td><td>closed</td><td>open</td></tr>
<tr><td>802.11g++</td><td>no</td><td>yes</td><td>no</td></tr>
<tr><td>Access Point</td><td>yes</td><td>yes</td><td>(no)</td></tr>
<tr><td>Client Mode</td><td>no</td><td>no</td><td>yes</td></tr>
<tr><td>WEP</td><td>yes</td><td>yes</td><td>(yes)</td></tr>
<tr><td>WPA</td><td>yes</td><td>yes</td><td>no</td></tr>
<tr><td>VLYNQ</td><td>yes</td><td>yes</td><td>no</td></tr>
<tr><td>Linux ioctls</td><td>no</td><td>no</td><td>yes</td></tr>
</table>

<h3>Speicherbelegung</h3>

<table summary="memory map">
<tr><th>Startadresse</th><th>Endadresse</th><th>Inhalt</th></tr>
<tr><td>0x80000000</td><td>0x80000fff</td><td>interner RAM 4 KiB</td></tr>
<tr><td>0x80001000</td><td>0x8fffffff</td><td>?</td></tr>
<tr><td>0x90000000</td><td>0x90ffffff</td><td>RAM 16 MiB</td></tr>
<tr><td>0x91000000</td><td>0x95ffffff</td><td>wie 0x90000000?</td></tr>
<tr><td>0x96000000</td><td>0xafffffff</td><td>?</td></tr>
<tr><td>0xa8610900</td><td></td><td>GPIO</td></tr>
<tr><td>0xa8610E00</td><td></td><td>UART</td></tr>
<tr><td>0xb0000000</td><td>0xb01fffff</td><td>Flash Memory 2 MiB</td></tr>
<tr><td>0xb0200000</td><td>0xb03fffff</td><td>wie 0xb0000000</td></tr>
<tr><td>0xb0400000</td><td>0xbfbfffff</td><td>?</td></tr>
<tr><td>0xbfc00000</td><td>0xbfc00fff</td><td>interner PROM 4 KiB</td></tr>
</table>

<h3>Aufteilung Flash Memory (2 MiB)</h3>

<table summary="flash memory map">
<tr><th>Index</th><th>Inhalt</th><th>Adresse</th><th>Gr&ouml;sse</th></tr>
<tr><td>[0] </td><td>Boot            </td><td>0xB0000000     </td><td>128K</td></tr>
<tr><td>[1] </td><td>Configuration   </td><td>0xB0020000     </td><td>128K</td></tr>
<tr><td>[2] </td><td>Web Image       </td><td>0xB0040000     </td><td>832K</td></tr>
<tr><td>[3] </td><td>Code Image      </td><td>0xB0110000     </td><td>896K</td></tr>
<tr><td>[4] </td><td>Boot Params     </td><td>0xB01F0000      </td><td>64K</td></tr>
<tr><td>[5] </td><td>Flash Image     </td><td>0xB0000000    </td><td>2048K</td></tr>
<tr><td>    </td><td>Flashende       </td><td>0xB01FFFFF</td><td></td></tr>
</table>

<h2>Firmwarekomponenten</h2>

<h3>Bootloader</h3>

<p>Alle Ger&auml;te verwenden einen Bootloader der Firma Broad Net Technology, INC.
Dieser ist normalerweise nur &uuml;ber die serielle Schnittstelle bedienbar.</p>

<p>Durch Dr&uuml;cken einer beliebigen Taste unmittelbar nach dem Einschalten
unterbricht man den normalen Bootvorgang und kommt in ein Debugmen&uuml;,
das wiederum durch Dr&uuml;cken von Taste "!" um Administratorbefehle erweitert
wird.</p>

<pre>
[U] Upload to Flash
[E] Erase Flash
[G] Run Runtime Code
[M] Upload to Memory
[R] Read from Memory
[W] Write to Memory
[T] Memory Test
[Y] Go to Memory
[A] Set MAC Address
[#] Set Serial Number
[V] Set Board Version
[H] Set Options
[P] Print Boot Params
</pre>

Im Administratormode sind unter anderem Firmware-Uploads m&ouml;glich.
So kann ein Linux-Kernel vorerst ins RAM geladen werden. Der Kernel muss dazu
im Binary-Format ohne Zus&auml;tze vorliegen.

<h4>Notfall-Kernel</h4>
Der Bootloader enth&auml;lt auch einen Notfall-Kernel, mit dem defekte Firmware
repariert werden kann (das geht, wenn der Bootloader selbst noch unversehrt ist).
Aktiviert wird er, indem der Resetknopf beim Einschalten gedr&uuml;ckt und so
lange gehalten wird, bis die Betriebs-LED blinkt.<p>

In dieser Betriebsart l&auml;uft ein DHCP-Server und ein Web-Server. &Uuml;ber die
Adresse http://192.168.2.1/ kann damit neue Firmware ins Flash geladen werden.

<h3>Betriebssystem</h3>

Zur Wahl stehen aktuell die Alternativen Linux oder eCOS.

Bei Linux wiederum besteht eine reiche Auswahl an Distributionen und Kernels:
Kernelversion 2.4 oder 2.6? Kernel eines anderen DSL-Routers mit &auml;hnlicher
Hardware? Distribution mit Anpassungen f&uuml;r MIPS-Prozessoren? Kritisch ist
bei Linux das relativ klein bemessene Flash.<p>

Mit einem gepatchten Linux-Kernel von <a href="http://www.openwrt.org/">OpenWrt</a>
konnte bereits gebootet werden.
<a href="openwrt/index.html.de">OpenWrt</a> stellt auch Komponenten wie Shell usw.
bereit, ist also eine ziemlich komplette Distribution f&uuml;r Router.<p>

WLAN und JFFS2 funktionieren noch nicht.
DSL wurde noch nicht getestet, k&ouml;nnte aber vielleicht schon tun.<p>

Der Kernel konnte zun&auml;chst nur per serieller Schnittstelle geladen
und aus dem RAM gestartet werden -
dabei war im Flash ein Filesystem (squashfs).<p>

Inzwischen laufen Kernel und Filesystem
nach dem Einschalten automatisch aus dem Flash.
Auch LED-Anzeige und Ethernet funktionieren.
Man kann sich also sofort (naja, nach der Bootzeit) per Telnet einloggen.

<h3>Ethernet</h3>

Der Treiber f&uuml;r Ethernet sollte bereits Teil des gew&auml;hlten Betriebssystems sein.

<h3>WLAN</h3>

F&uuml;r den WLAN-Chipsatz gibt es bereits ein Open Source Projekt,
dessen Ergebnisse hoffentlich integriert werden k&ouml;nnen.<p>

Angestrebt wird der Betrieb als Access Point (auch mit WDS) oder
Wireless Client Adapter.<p>

Die gebr&auml;uchlichen Verschl&uuml;sselungsverfahren sollen
unterst&uuml;tzt werden.

<h3>Shell</h3>

Hier kommt eigentlich nur Busybox in Frage. Damit stehen dann auch
gleich Dienste wie Telnet, Webserver, TFTP bereit.

<h3>NTP</h3>

<h3>SSH</h3>

<h3>Firewall</h3>

<h2>Sonstiges</h2>

<h3>Dateiformat Firmware-Image</h3>

Firmware-Images, die vom Webfrontend f&uuml;r Updates akzeptiert werden,
k&ouml;nnen mit dem kleinen Hilfsprogramm <a href="tools/mkfirm.c">mkfirm</a>
erzeugt werden. Das Programm enth&auml;lt Informationen zum Dateiformat.<p>

Achtung! Linux-Kernel und Filesystem sind so gross, dass sie nicht in
ein Firmware-Image passen (genauer: sie passen schon, aber der Bootloader
st&uuml;rzt beim Ladeversuch ab. Das aktuelle mkfirm.c kann daher getrennte
Firmware-Images f&uuml;r Kernel und Filesystem erzeugen.<p>

Eine ausf&uuml;hrliche Dokumentation steht in
<a href="doc/loader.html.en">loader.html.en (englisch)</a>.

<h2>Links</h2>

<a href="http://www.openwrt.org/">OpenWrt</a>
<p>Open Source Softwarepakete und Linux-Kernel f&uuml;r diverse Router</p>

<a href="http://www.linux-mips.org/">Linux MIPS</a>
<p>Linux-Kernel f&uuml;r MIPS-basierte Systeme, sehr gute Dokumentation</p>

<a href="http://www.wehavemorefun.de/fritzbox/">AVM Fritz!Box</a>
<p>Linux-Kernel f&uuml;r MIPS-basierte Systeme, sehr gute Dokumentation</p>

</td>
</tr>
</table>
</body>
</html>
