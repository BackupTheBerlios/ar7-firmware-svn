<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
	<title>AR7-Firmware</title>
	<meta http-equiv="Content-Type" content="text/html">
	<meta name="description" content="Linux based firmware for AR7 based routers">
	<meta name="author" content="Stefan Weil">
	<meta name="keywords" content="Linux, firmware, router, AR7, GPL,
		Sinus 154, SX541">
	<link rel=stylesheet type="text/css" href="style.css" />
</head>

<body>

<div class="menusection">
<div class="menuheader">
<a href="http://developer.berlios.de">
<img src="http://developer.berlios.de/bslogo.php?group_id=3721" width="124" height="32" border="0" alt="BerliOS"></a>
</div>
<p><a href="http://developer.berlios.de/projects/ar7-firmware/"><b>AR7-Firmware</b></a></p>
<p><a href="index.html.de">Übersicht</a></p>
<p><a href="doc/loader.html.de">Bootloader</a></p>
<p><a href="qemu/index.html.de">Emulation</a></p>
<p><a href="openwrt/index.html.de">OpenWrt</a></p>
<p><a href="devices/">Router</a></p>
<div class="submenu">
<p><a href="devices/basic3">Sinus 154 DSL Basic 3</a></p>
<p><a href="devices/basicse">Sinus 154 DSL Basic SE</a></p>
<p><a href="devices/sx541">Gigaset SX541</a></p>
</div>
<p><a href="tools/">Werkzeuge</a></p>
</div>

<div class="pagesection">
<div class="pageheader">
<a href="index.html.de">deutsch</a> <a href="index.html.en">english</a>
</div>

<h1>Firmware f&uuml;r Sinus 154 DSL Basic SE und Sinus 154 DSL Basic 3</h1>

<p>Ziel dieses Projektes ist zun&auml;chst, eine Open Source Firmware
f&uuml;r die beiden fast baugleichen DSL-Router Sinus 154 DSL Basic SE und
Sinus 154 DSL Basic 3 zu entwickeln.
Diese Ger&auml;te werden in Deutschland von der Telekom
vermarktet und sind daher vermutlich sehr verbreitet.</p>

<p>Beide basieren auf einem Prozessor der AR7-Familie von
Texas Instruments und verwenden im Originalzustand eine Closed Source
Firmware, vermutlich 
mit dem Echtzeitbetriebssystem VxWorks von WindRiver Systems.</p>

<p>Da so Erweiterungen und Fehlerkorrekturen f&uuml;r den Anwender nicht
m&ouml;glich sind, suchen wir eine Alternative, die frei erweiterbar ist.</p>

<p>Die Erfahrungen des Projektes k&ouml;nnen sicher auf verwandte Ger&auml;te
der Sinus 154 Familie und auch weitere anderer Hersteller angewendet werden.
Ein Beispiel f&uuml;r kompatible Hardware sind das Sinus 154 DSL SE (darauf
deutet zumindest die Firmware hin, noch nicht praktisch &uuml;berpr&uuml;ft)
und das <a href="devices/sx541">Siemens Gigaset SX541</a>.
Besitzer solcher Hardware sind willkommen und k&ouml;nnen sich im
Wiki-Bereich des Projektes eintragen oder an die auf der Projektseite
angegebene Kontaktadresse wenden.</p>

<p>Den Wiki-Bereich findet man ebenso wie das Entwickler- und Anwender-Forum
und weitere Information &uuml;ber die
<a href="http://developer.berlios.de/projects/ar7-firmware/">Projektseite</a>
auf BerliOS.</p>

<h1>Wichtige Hinweise</h1>

<p>Jegliche &Auml;nderungen an Ger&auml;ten, die nach hier gemachten Angaben erfolgen,
sind auf eigene Gefahr. Sie k&ouml;nnen zum Verlust der Garantie f&uuml;hren und
machen im schlimmsten Fall das Ger&auml;t unbrauchbar.</p>

<p>Insbesondere jede Ver&auml;nderung des Bootloaders (im Flash) ist fatal und
daher unbedingt zu vermeiden!</p>

<p>Fehlerhafte Software kann aber auch den Prozessor oder andere Komponenten
&uuml;berhitzen (beispielsweise durch &Uuml;bertakten) und dadurch tempor&auml;re
oder dauerhafte Ausf&auml;lle bewirken.</p>

<h1>Projektplanung (Stand 22.01.2006)</h1>

Folgende weitere Schritte sind vorgesehen:
<ul>
<li>Optimierung des Bootloaders, mit dem neue Firmware geladen werden kann.<br>
Booten von Linux aus dem Flash funktioniert, allerdings wird der Flash dabei
schlecht ausgenutzt
(jeweils 128 KiB verschenkter Speicher bei Kernel und Filesystem).</li>
<li>Treiber f&uuml;r WLAN.<br>
F&uuml;r WLAN gibt es zwar einen Treiber von Texas Instruments, der aber
wegen seines unklaren rechtlichen Status und nicht allgemein verwendbar ist.
Ein Ersatz, der auf freiem Quellcode basiert, ist in Entwicklung.</li>
<li>Debugm&ouml;glichkeiten erweitern.<br>
Leider gibt es aber noch keinen Kernel Debugger (kgdb), mit dem der Kernel
einschliesslich der Treiber &uuml;ber die serielle Schnittstelle komfortabel
diagnostiziert werden k&ouml;nnte.</li>
</ul>

Vorerst abgeschlossen sind folgende Punkte:
<ul>
<li>Bestimmung der Hardware des Sinus 154 DSL Basic SE.<br>
Dies ist weitgehend abgeschlossen.</li>
<li>Elementare Debugm&ouml;glichkeiten.<br>
Zur Zeit werden Kernelmeldungen (auf der seriellen Konsole oder im
Systemprotokoll), gelegentlich auch die beiden bisher ansprechbaren
Statuslampen zur Diagnose benutzt.
<li>Auswahl und Erstellung eines Kernels.<br>
Bis auf weiteres erfolgt die weitere Entwicklung mit einem Linux-Kernel.
Zur Zeit wird die
<a href="openwrt/index.html.de">AR7 Portierung von OpenWrt</a>
mit Linux Kernel 2.4.32 verwendet, die schon ganz ordentlich funktioniert
(Shell &uuml;ber serielle Konsole oder per Telnet bedienbar,
komplettes Betriebssystem bootet nach Einschalten direkt aus dem Flash).</li>
<li>Auswahl und Einbindung weiterer Firmware-Komponenten.<br>
F&uuml;r die meisten Treiber und weitere Komponenten wie Shell, Serverdienste,
Firewall, Bridgefunktionalit&auml;t usw. kann man gl&uuml;cklicherweise
weitgehend auf andere Open Source Projekte zur&uuml;ckgreifen.
<a href="openwrt/index.html.de">OpenWrt</a>
enth&auml;lt schon alles Notwendige.</li>
</ul>

<h1>Firmwarekomponenten</h1>

<h3>Bootloader</h3>

<p>Alle Ger&auml;te verwenden einen Bootloader der Firma Broad Net Technology, INC.
Dieser ist normalerweise nur &uuml;ber die serielle Schnittstelle bedienbar.</p>

<p>Durch Dr&uuml;cken einer beliebigen Taste unmittelbar nach dem Einschalten
unterbricht man den normalen Bootvorgang und kommt in ein Debugmen&uuml;,
das wiederum durch Dr&uuml;cken von Taste "!" um Administratorbefehle erweitert
wird.</p>

<pre>
[U] Upload to Flash
[E] Erase Flash
[G] Run Runtime Code
[M] Upload to Memory
[R] Read from Memory
[W] Write to Memory
[T] Memory Test
[Y] Go to Memory
[A] Set MAC Address
[#] Set Serial Number
[V] Set Board Version
[H] Set Options
[P] Print Boot Params
</pre>

Im Administratormode sind unter anderem Firmware-Uploads m&ouml;glich.
So kann ein Linux-Kernel vorerst ins RAM geladen werden. Der Kernel muss dazu
im Binary-Format ohne Zus&auml;tze vorliegen.

<h4>Notfall-Kernel</h4>
Der Bootloader enth&auml;lt auch einen Notfall-Kernel, mit dem defekte Firmware
repariert werden kann (das geht, wenn der Bootloader selbst noch unversehrt ist).
Aktiviert wird er, indem der Resetknopf beim Einschalten gedr&uuml;ckt und so
lange gehalten wird, bis die Betriebs-LED blinkt.<p>

In dieser Betriebsart l&auml;uft ein DHCP-Server und ein Web-Server. &Uuml;ber die
Adresse http://192.168.2.1/ kann damit neue Firmware ins Flash geladen werden.

<h3>Betriebssystem</h3>

Zur Wahl stehen aktuell die Alternativen Linux oder eCOS.

Bei Linux wiederum besteht eine reiche Auswahl an Distributionen und Kernels:
Kernelversion 2.4 oder 2.6? Kernel eines anderen DSL-Routers mit &auml;hnlicher
Hardware? Distribution mit Anpassungen f&uuml;r MIPS-Prozessoren? Kritisch ist
bei Linux das relativ klein bemessene Flash.<p>

Mit einem gepatchten Linux-Kernel von <a href="http://www.openwrt.org/">OpenWrt</a>
konnte bereits gebootet werden.
<a href="openwrt/index.html.de">OpenWrt</a> stellt auch Komponenten wie Shell usw.
bereit, ist also eine ziemlich komplette Distribution f&uuml;r Router.<p>

WLAN und JFFS2 funktionieren noch nicht.
DSL wurde noch nicht getestet, k&ouml;nnte aber vielleicht schon tun.<p>

Der Kernel konnte zun&auml;chst nur per serieller Schnittstelle geladen
und aus dem RAM gestartet werden -
dabei war im Flash ein Filesystem (squashfs).<p>

Inzwischen laufen Kernel und Filesystem
nach dem Einschalten automatisch aus dem Flash.
Auch LED-Anzeige und Ethernet funktionieren.
Man kann sich also sofort (naja, nach der Bootzeit) per Telnet einloggen.

<h3>Ethernet</h3>

Der Treiber f&uuml;r Ethernet sollte bereits Teil des gew&auml;hlten Betriebssystems sein.

<h3>WLAN</h3>

F&uuml;r den WLAN-Chipsatz gibt es bereits ein Open Source Projekt,
dessen Ergebnisse hoffentlich integriert werden k&ouml;nnen.<p>

Angestrebt wird der Betrieb als Access Point (auch mit WDS) oder
Wireless Client Adapter.<p>

Die gebr&auml;uchlichen Verschl&uuml;sselungsverfahren sollen
unterst&uuml;tzt werden.

<h3>Shell</h3>

Hier kommt eigentlich nur Busybox in Frage. Damit stehen dann auch
gleich Dienste wie Telnet, Webserver, TFTP bereit.

<h3>NTP</h3>

<h3>SSH</h3>

<h3>Firewall</h3>

<h1>Sonstiges</h1>

<h3>Dateiformat Firmware-Image</h3>

Firmware-Images, die vom Webfrontend f&uuml;r Updates akzeptiert werden,
k&ouml;nnen mit dem kleinen Hilfsprogramm <a href="tools/mkfirm.c">mkfirm</a>
erzeugt werden. Das Programm enth&auml;lt Informationen zum Dateiformat.<p>

Achtung! Linux-Kernel und Filesystem sind so gross, dass sie nicht in
ein Firmware-Image passen (genauer: sie passen schon, aber der Bootloader
st&uuml;rzt beim Ladeversuch ab. Das aktuelle mkfirm.c kann daher getrennte
Firmware-Images f&uuml;r Kernel und Filesystem erzeugen.<p>

Eine ausf&uuml;hrliche Dokumentation steht in
<a href="doc/loader.html.en">loader.html.en (englisch)</a>.

<h1>Links</h1>

<dl>

<dt><a href="http://www.openwrt.org/">OpenWrt</a></dt>
<dd>
<p>Open Source Softwarepakete und Linux-Kernel f&uuml;r diverse Router</p>
</dd>

<dt><a href="http://www.linux-mips.org/">Linux MIPS</a></dt>
<dd>
<p>Linux-Kernel f&uuml;r MIPS-basierte Systeme, sehr gute Dokumentation</p>
</dd>

<dt><a href="http://www.wehavemorefun.de/fritzbox/">AVM Fritz!Box</a></dt>
<dd>
<p>Linux-Kernel f&uuml;r MIPS-basierte Systeme, sehr gute Dokumentation</p>
</dd>

</dl>

</div>
</body>
</html>
