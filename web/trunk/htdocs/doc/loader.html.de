<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
	<title>Bootloader Dokumentation</title>
        <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
	<meta name="author" content="Stefan Weil">
	<link rel=stylesheet type="text/css" href="../ar7.css" />
</head>

<body>
<table class=page summary="page">
<tr class=titlebar>
<td>
<a href="http://developer.berlios.de">
<img src="http://developer.berlios.de/bslogo.php?group_id=3721" width="124" height="32" border="0" alt="BerliOS Logo"></a>
</td>
<td>
<a href="loader.html.de">deutsch</a> <a href="loader.html.en">english</a>
</td>
</tr>

<tr>
<td class=menu>
<table class=menu summary="menu">
<tr><th><a href="http://developer.berlios.de/projects/ar7-firmware/">AR7-Firmware</a></th></tr>
<tr><td><a href="../index">Overview</a></td></tr>
<tr><td><a href="loader">Bootloader</a></td></tr>
<tr><td><a href="../openwrt/index">OpenWrt</a></td></tr>
<tr><td><a href="../devices/">Router</a></td></tr>
<tr><td><a href="../tools/">Tools</a></td></tr>
</table>
</td>

<td class=page>

<h1>Bootloader for Sinus 154 DSL Basic SE and Sinus 154 DSL Basic 3</h1>

This document describes the file format of boot images for the
bootloader from Broad Net Technology, Inc.<p>

The same bootloader is used in most of the Sinus 154 devices and also in the
devices of other manufacturers.

<h3>File Format of Firmware Images</h3>

<p>Firmware images are a collection of zipped files.</p>

<p>Most vendor firmware images contain 2 zipped files:
the zipped filesystem (pfs.img) with all pages for the web interface,
and a zipped program file (soho.bin).</p>

<p>Firmware update via web interface uses these combined firmware images.</p>

<p>The bootloader can also read firmware images with a single zipped file
and use them for separate updates of program or filesystem.</p>

<p>My enhanced version of the tool <a href="/tools/mkfirm.c">mkfirm</a>
creates all sorts of firmware images and also contains some
informationen on the file format.</p>

<h3>Firmware Image of Emergency Kernel</h3>

The boot partition in flash memory contains an emergency kernel.
It is possible to dump this partition into a file and to extract
the zipped files of pfs.img and soho.bin.

<h3>Firmware update for Sinus 154</h3>

You have several choices to get your firmware into flash memory.

<h4>Update using standard update procedure</h4>

The normal way of updating is to start the router with the original
firmware. Then you can connect to the web interface using any browser
and go into the update firmware menu.<p>

This works well with original firmware updates. In theory it will also
work with home made firmware images, but it might also fail because
these images are too large.<p>

After an exchange of the original firmware and installation of the
Linux based firmware, this update method is no longer available.<p>

So I did never check it for my Linux based firmware...

<h4>Update using the emergency kernel</h4>

This is the recommanded procedure, because it works always (if you did
not destroy your bootloader!), is fast (it uses the ethernet connection),
and you don't have to open the case of your Sinus 154.<p>

Start the router while pressing the reset button until the LED will
blink. This overrides normal startup procedures and starts an
emergency kernel.<p>

The emergency kernel contains ethernet driver, dhcp server and web server.
So you can connect to its web interface at URL http://192.168.2.1/
using any browser.
The web interface is very simple and only allows firmware updates and
resetting of the router.<p>

The firmware update menu allows updates of the bootloader (never use it -
if you destroy the bootloader, you ruin your device), the kernel program
or the filesystem (user interface). These options need a firmware file
which includes one zipped file.<p>

You may also update kernel program and
filesystem in one step. This option needs a standard firmware file which
includes two zipped files.<p>

My version of the bootloader cannot load standard firmware files which are
too large: it will accept them but all you get is a bootloader crash.
So you must use separate updates for kernel program and filesystem.

<h4>Update using the bootloader and serial console</h4>

With a serial connection, you can enter a boot menu which allows firmware
uploads using the xmodem protocol. Use separate firmware files for
the kernel program (code image) and filesystem (web image)
as for the emergency kernel.

<h3>Requirements for firmware in flash and firmware files</h3>

<p>Firmware files must match several criteria to be accepted by the bootloader for
booting or by one of the three methods for flashing.</p>

<p>The bootloader checks both the code (kernel) and the web (filesystem)
partitions in the flash memory:</p>

<ul>
<li>string 'PK' at offset 0
<li>value 3 at offset 2
<li>value 4 at offset 3
<li>bit0 == 0 at offset 7
<li>value 8 at offset 8
<li>length of data at (end - 12)
<li>value 0x12345678 (little endian) at (end - 8)
<li>CRC-32 of data at (end - 4)
</ul>

<p>A similar format is used for firmware files. They may contain
the kernel and the filesystem ("runtime") or just one of them.</p>

<p>Check for flashing:</p>

<ul>
<li>The zipped kernel file must contain a file named soho.bin (checked by emergency kernel).
<li>The zipped filesystem must contain a file named pfs.img (checked by emergency kernel).
<li>The zipped file must be smaller than the flash partition it belongs to.
Because the last flash sector is used for a checksum, this sector (typically
64 KiB) is also unavailable for the zipped file.
</ul>

<p>This results in the following firmware layout for Sinus 154 DSL Basic SE and
other devices with the same flash partition sizes:</p>

<ul>
<li>Partition 3 (code image) has 896 KiB. Only (896 - 64) KiB = 832 KiB
can be used for the program code. I use a small zipped loader followed by a kernel
which is LZMA compressed. Earlier images used a zipped Linux kernel which
needs 773 KiB, so the new layout allows much larger kernels.

<li>Partition 2 (web image) has 832 KiB. Only (832 - 64) KiB = 768 KiB
can be used for the zipped filesystem. But how can Linux use a zipped
filesystem? I use a trick and split the partition in two parts:
64 KiB zip file (first part of the original pfs.img) and fill bytes,
rest (768 - 64) KiB = 704 KiB
used for squashfs. My squashfs uses 625 KiB. I had to strip down the
OpenWrt default filesystem because it was too big.
</ul>

<p>With this layout, you can flash kernel and filesystem, and the bootloader will
automatically boot Linux.
We might improve flash usage later,
but for the moment this satisfies the first needs.</p>

<p>Here is an example how you get firmware images from OpenWrt.
It is still a dirty hack, because you need an original pfs.img.
You will get three new files in the openwrt/bin directory:
linux.bin (firmware in standard format, unusable because too large),
linux-firmware.bin (kernel part) and linux-userinterface.bin (filesystem part).</p>

<pre>
#!/bin/sh
tmpdir=/tmp/openwrt.tmp
openwrt=~/src/openwrt
magic=BRN154BAS

rm -frv $tmpdir
mkdir -p $tmpdir
cd $tmpdir
ln -f $openwrt/build_mipsel/linux-2.4-ar7/vmlinux soho.bin
zip -9v soho.zip soho.bin
ln -f $openwrt/build_mipsel/linux-2.4-ar7/root.squashfs .
dd if=~/FW_154DSLBasicSE_V1.12/pfs.img of=pfs.img bs=65536 count=1
#echo >pfs.img
zip -9v tmp.zip pfs.img
cat tmp.zip /dev/zero | dd of=pfs.zip bs=65536 count=1
cat root.squashfs >>pfs.zip
mkfirm -o linux.bin -m $magic pfs.zip soho.zip
mkfirm -o linux-firmware.bin -m $magic soho.zip
mkfirm -o linux-userinterface.bin -m $magic pfs.zip
ln -f linux*.bin $openwrt/bin
</pre>

<h3>Optimisation of flash usage</h3>

<pre>
Single compression

Zipped kernel code in flash (832 KiB) decompressed to 0x94000000 and started from there.

Double compression

Zipped code with LZMA compressed kernel code and loader decompressed to 
0x94000000 and started from there.

Loader moves code to 0x94300000 and decompresses it to 0x94000000.
Then it starts it from 0x94000000.

The loader code uses RAM above 0x94500000, so the compressed code must
stay below this limit.

Note: uncompressed kernel must be less than 3 MiB.
Current kernel is 1640 KiB uncompressed, 680 KiB zipped, 500 KiB LZMA + zipped.
Current squashfs is 652 KiB.
</pre>

</td>
</tr>
</table>
</body>
</html>
